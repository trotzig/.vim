snippet fun "function with dynamic docblock" b
`!p
# Currently Ultisnips does not support dynamic tabstops, so we cannot add
# tabstops to the datatype for these param tags until that feature is added.
def formatTag(argument):
  return " * @param {{}} {0}".format(argument)

arguments = t[2].split(',')
arguments = [argument.strip() for argument in arguments if argument]

if len(arguments):
  tags = map(formatTag, arguments)
  snip.rv = "/**"
  for tag in tags:
    snip += tag
  snip += ' */'
  snip += ''
else:
  snip.rv = ''
`${1:name}: function(${2:arguments}) {
  $0
},
endsnippet

# Generates a `render` function, useful for React components.
snippet render "render function" b
/**
 * @return {Object}
 */
render: function() {
  return (
    ${VISUAL}$0
  );
}
endsnippet

snippet cc "createClass"
var ${1:`!p snip.rv = ''.join(x.title() for x in re.sub('\.js$', '', snip.basename or 'ModuleName').split('_'))`} = React.createClass({
  /**
   * @return {Object}
   */
  render: function() {
    return (
      $0
    );
  }
});

module.exports = $1;
endsnippet

snippet cdm "componentDidMount" b
componentDidMount: function() {
  $0
},
endsnippet

snippet cdu "componentDidUpdate" b
/**
 * @param {Object} prevProps
 * @param {Object} prevState
 */
componentDidUpdate: function(prevProps, prevState) {
  $0
},
endsnippet

snippet cwm "componentWillMount" b
componentWillMount: function() {
  $0
},
endsnippet

snippet cwrp "componentWillReceiveProps" b
/**
 * @param {Object} nextProps
 */
componentWillReceiveProps: function(nextProps) {
  $0
},
endsnippet

snippet cwum "componentWillUnmount" b
componentWillUnmount: function() {
  $0
},
endsnippet

snippet cwu "componentWillUpdate" b
/**
 * @param {Object} nextProps
 * @param {Object} nextState
 */
componentWillUpdate: function(nextProps, nextState) {
  $0
},
endsnippet

snippet gdp "getDefaultProps" b
/**
 * @return {Object}
 */
getDefaultProps: function() {
  return {
    $0
  };
},
endsnippet

snippet gis "getInitialState" b
/**
 * @return {Object}
 */
getInitialState: function() {
  return {
    $0
  };
},
endsnippet

snippet scu "shouldComponentUpdate" b
/**
 * @param {Object} nextProps
 * @param {Object} nextState
 * @return {boolean}
 */
shouldComponentUpdate: function(nextProps, nextState) {
  return ${1:true};
},
endsnippet

snippet req "require"
var `!p
def formatVariableName(path):
  lastPart = path.split('/')[-1]
  if lastPart == 'underscore':
    return '_'
  elif lastPart == 'jquery':
    return '$'
  else:
    return string.replace(lastPart.title(), '_', '');
snip.rv = formatVariableName(t[1])
` = require('${1}');$0
endsnippet
